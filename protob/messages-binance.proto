syntax = "proto2";
package hw.trezor.messages.binance;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageBinance";

/**
 * Request: Ask device for Binance address
 * @start
 * @next BinanceAddress
 * @next Failure
 */
message BinanceGetAddress {
    repeated uint32 address_n = 1;  // BIP-32-style path to derive the key from master node
    optional bool show_display = 2; // optionally prompt for confirmation on trezor display
}

/**
 * Request: Ask device for Binance address
 * @end
 */
message BinanceAddress {
    optional string address = 1;    // Base58 Binance address
}

/**
 * Request: Ask device for public key corresponding to address_n path
 * @start
 * @next BinancePublicKey
 */
message BinanceGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains public key derived from device private seed
 * @end
 */
message BinancePublicKey {
    optional bytes public_key = 1;
}

/**
* Structure representing the common part of Binance transactions
*/
message BinanceTxCommon  {
    optional string account_number = 1;
    optional string chain_id = 2;
    optional bytes data = 3;
    optional string memo = 4;
    optional sint64 sequence = 5;
    optional sint64 source = 6;
}

/**
 * Request: Ask device to sign Binance transfer transaction
 * @start
 * @next BinanceSignedTx
 * @next Failure
 */
message BinanceTransferTx {
    optional BinanceTxCommon transaction = 1;
    repeated TransferMsg msgs = 2;

    message Coin {
        optional sint64 amount = 1;
        optional string denom = 2;
    }

    message InputOutput {
        optional string address = 1;
        repeated Coin coins = 2;
    }

    message TransferMsg {
        repeated InputOutput inputs = 1;
        repeated InputOutput outputs = 2;
    }
}

/**
 * Request: Ask device to sign Binance order transaction
 * @start
 * @next BinanceSignedTx
 * @next Failure
 */
message BinanceOrderTx {
    optional BinanceTxCommon transaction = 1;
    repeated OrderMsg msgs = 2;

    message OrderMsg {
        optional string id = 1;
        optional OrderType ordertype = 2;
        optional sint64 price = 3;
        optional sint64 quantity = 4;
        optional string sender = 5;
        optional OrderSide side = 6;
        optional string symbol = 7;
        optional TimeInForce timeinforce = 8;

        enum OrderType {
            OT_UNKNOWN = 0;
            MARKET = 1;
            LIMIT = 2;
            OT_RESERVED = 3;
        }

        enum OrderSide {
            SIDE_UNKNOWN = 0;
            BUY = 1;
            SELL = 2;
        }

        enum TimeInForce {
            TIF_UNKNOWN = 0;
            GTE = 1;
            TIF_RESERVED = 2;
            IOC = 3;
        }
    }
}

/**
 * Request: Ask device to sign Binance cancel transaction
 * @start
 * @next BinanceSignedTx
 * @next Failure
 */
message BinanceCancelTx {
    optional BinanceTxCommon transaction = 1;
    repeated CancelMsg msgs = 2;

    message CancelMsg {
        optional string refid = 1;
        optional string sender = 2;
        optional string symbol = 3;
    }
}

/**
 * Response: signature for transaction
 * @end
 */
message BinanceSignedTx {
	optional bytes signature = 1;
	optional string json = 2;
}

/**
 * Request: Ask device to verify json sign doc
 * @start
 * @next Success
 * @next Failure
 */
message BinanceVerifyMessage {
    optional bytes public_key = 1;
    optional bytes signature = 2;
    optional string json = 3;
}
